# Install required libraries
!pip install scikit-learn matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the California Housing dataset
california_housing = fetch_california_housing()

# Convert the dataset to a pandas DataFrame
df = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)

# Add the target variable to the DataFrame (house prices)
df['Price'] = california_housing.target

# Preview the dataset
print(df.head())

# Selecting the features: 'AveRooms' (average number of rooms per household), 'AveOccup' (average occupancy),
# 'HouseAge' (age of the house), and using 'Price' as the target variable.
X = df[['AveRooms', 'AveOccup', 'HouseAge']]  # Feature columns (replace with your desired features)
y = df['Price']  # Target column (house price)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model using R-squared and Mean Squared Error (MSE)
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"R-squared: {r2}")
print(f"Mean Squared Error: {mse}")

# Visualize the true vs predicted values
plt.scatter(y_test, y_pred)
plt.xlabel("True Prices")
plt.ylabel("Predicted Prices")
plt.title("True Prices vs Predicted Prices")
plt.show()

# Optionally, visualize the residuals
residuals = y_test - y_pred
plt.scatter(y_test, residuals)
plt.xlabel("True Prices")
plt.ylabel("Residuals")
plt.title("Residuals vs True Prices")
plt.show()
